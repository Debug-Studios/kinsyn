// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/kinsyn.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InputPlugin_SyncHighlights_FullMethodName = "/proto.InputPlugin/SyncHighlights"
)

// InputPluginClient is the client API for InputPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InputPluginClient interface {
	SyncHighlights(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HighlightList, error)
}

type inputPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewInputPluginClient(cc grpc.ClientConnInterface) InputPluginClient {
	return &inputPluginClient{cc}
}

func (c *inputPluginClient) SyncHighlights(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HighlightList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HighlightList)
	err := c.cc.Invoke(ctx, InputPlugin_SyncHighlights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InputPluginServer is the server API for InputPlugin service.
// All implementations should embed UnimplementedInputPluginServer
// for forward compatibility.
type InputPluginServer interface {
	SyncHighlights(context.Context, *Empty) (*HighlightList, error)
}

// UnimplementedInputPluginServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInputPluginServer struct{}

func (UnimplementedInputPluginServer) SyncHighlights(context.Context, *Empty) (*HighlightList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncHighlights not implemented")
}
func (UnimplementedInputPluginServer) testEmbeddedByValue() {}

// UnsafeInputPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InputPluginServer will
// result in compilation errors.
type UnsafeInputPluginServer interface {
	mustEmbedUnimplementedInputPluginServer()
}

func RegisterInputPluginServer(s grpc.ServiceRegistrar, srv InputPluginServer) {
	// If the following call pancis, it indicates UnimplementedInputPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InputPlugin_ServiceDesc, srv)
}

func _InputPlugin_SyncHighlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputPluginServer).SyncHighlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InputPlugin_SyncHighlights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputPluginServer).SyncHighlights(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// InputPlugin_ServiceDesc is the grpc.ServiceDesc for InputPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InputPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InputPlugin",
	HandlerType: (*InputPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncHighlights",
			Handler:    _InputPlugin_SyncHighlights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kinsyn.proto",
}

const (
	OutputPlugin_SendNotification_FullMethodName = "/proto.OutputPlugin/SendNotification"
)

// OutputPluginClient is the client API for OutputPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutputPluginClient interface {
	SendNotification(ctx context.Context, in *HighlightList, opts ...grpc.CallOption) (*Empty, error)
}

type outputPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewOutputPluginClient(cc grpc.ClientConnInterface) OutputPluginClient {
	return &outputPluginClient{cc}
}

func (c *outputPluginClient) SendNotification(ctx context.Context, in *HighlightList, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, OutputPlugin_SendNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutputPluginServer is the server API for OutputPlugin service.
// All implementations should embed UnimplementedOutputPluginServer
// for forward compatibility.
type OutputPluginServer interface {
	SendNotification(context.Context, *HighlightList) (*Empty, error)
}

// UnimplementedOutputPluginServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOutputPluginServer struct{}

func (UnimplementedOutputPluginServer) SendNotification(context.Context, *HighlightList) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedOutputPluginServer) testEmbeddedByValue() {}

// UnsafeOutputPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutputPluginServer will
// result in compilation errors.
type UnsafeOutputPluginServer interface {
	mustEmbedUnimplementedOutputPluginServer()
}

func RegisterOutputPluginServer(s grpc.ServiceRegistrar, srv OutputPluginServer) {
	// If the following call pancis, it indicates UnimplementedOutputPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OutputPlugin_ServiceDesc, srv)
}

func _OutputPlugin_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HighlightList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutputPluginServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OutputPlugin_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutputPluginServer).SendNotification(ctx, req.(*HighlightList))
	}
	return interceptor(ctx, in, info, handler)
}

// OutputPlugin_ServiceDesc is the grpc.ServiceDesc for OutputPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OutputPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OutputPlugin",
	HandlerType: (*OutputPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _OutputPlugin_SendNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kinsyn.proto",
}
